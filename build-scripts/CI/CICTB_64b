#!/bin/bash

# ===============================================
# Raspberry Pi Toolchains(raspberry-pi-cross-compilers): This project
# provides latest automated GCC Cross Compiler & Native (ARM & ARM64)
# build-scripts and precompiled standalone toolchains for Raspberry Pi.

# Copyright (C) 2020 Abhishek Thakur(@abhiTronix) <abhi.una12@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ===============================================

# This script aauto downloads, compiles, and compresses Cross & Native GCC ARM64 Toolchain
# binaries targeting any Raspberry Pi 64-bit (like Pi64) OSes.

helpfunction() {
	#helper function that prints custom usage help menu
	echo ""
	echo ""
	figlet -t -k -f /usr/share/figlet/standard.flf "CLI Raspberry Pi Cross Toolchains Builder 64-bit"
	echo ""
	figlet -t -k -f /usr/share/figlet/term.flf "Copyright (c) 2020 abhiTronix"
	echo ""
	echo ""
	echo "Usage: $0 -g [GCC version] -o [Target OS type]"
	echo -e "\t-g GCC version you want to compile?: (7.1.0|7.2.0|7.3.0|7.4.0|7.5.0|8.1.0|8.2.0|8.3.0|8.4.0|9.1.0|9.2.0|9.3.0|9.4.0|10.1.0|10.2.0|10.3.0)"
	echo -e "\t-o What's yours Target Raspberry Pi OS type?: (stretch|buster|bullseye)"
	echo ""
	echo ""
	exit 1 # Exits script after printing help
}

#input arguments handler
while getopts "g:o:" opt; do
	case "$opt" in
	g) GCC_VERSION="$OPTARG" ;;
	o) RPIOS_TYPE="$OPTARG" ;;
	?) helpfunction ;; #prints help function for invalid parameter
	esac
done
#validates parameters and print usage helper function in case parameters are missing
if [ -z "$GCC_VERSION" ]; then
	echo "Error: Required parameter is missing!"
	helpfunction
elif [ -z "$RPIOS_TYPE" ]; then
	RPIOS_TYPE="stretch"
else
	echo "Parameters configured!"
fi

# skip bullseye base
if [ "$RPIOS_TYPE" != "bullseye" ] && [ "$GCC_VERSION" = "10.2.0" ]; then
	echo "Invalid GCC: $GCC_VERSION!"
	exit
fi

#collect dependencies versions from raspberry pi os
if [ "$RPIOS_TYPE" = "stretch" ]; then
	if [ "$GCC_VERSION" == "8.3.0" ]; then
		echo "$GCC_VERSION is not supported on stretch!"
		exit 0
	else
		GCCBASE_VERSION=6.3.0
	fi
elif [ "$RPIOS_TYPE" = "buster" ]; then
	if echo ${GCC_VERSION%.*} "8.3" | awk '{exit ( $1 >= $2 )}'; then
		echo "$GCC_VERSION is not supported on buster!"
		exit 0
	else
		GCCBASE_VERSION=8.3.0
	fi
elif [ "$RPIOS_TYPE" = "bullseye" ]; then
	if echo ${GCC_VERSION%.*} "10.2" | awk '{exit ( $1 >= $2 )}'; then
		echo "$GCC_VERSION is not supported on bullseye!"
		exit 0
	else
		GCCBASE_VERSION=10.2.0
	fi
else
	echo "Invalid argument value: $RPIOS_TYPE"
	exit 1
fi

#collect build directory if not defined
if [ "$BUILDDIR" = "" ]; then
	#select temp directory
	echo "Build directory is empty, using temp directory!"
	BUILDDIR=$(dirname "$(mktemp tmp.XXXXXXXXXX -ut)")
fi

#collect programming languages if not defined
if [ "$LANGUAGES" = "" ]; then
	#select temp directory
	echo "Building binaries for c,c++,fortran programming languages!"
	LANGUAGES=c,c++,fortran
fi

#pre-defined params
FOLDER_VERSION=64
ARCH=armv8-a+fp+simd
TARGET=aarch64-linux-gnu
GDB_VERSION=10.2

#validate env variables
if ! [[ "$GCCBASE_VERSION" =~ ^(6.3.0|8.3.0|10.2.0)$ ]]; then exit 1; fi
if [ "$ARCH" != "armv8-a+fp+simd" ]; then exit 1; fi
if [ "$FOLDER_VERSION" != "64" ]; then exit 1; fi
if [ "$BUILDDIR" = "" ]; then exit 1; fi
if [ "$LANGUAGES" = "" ]; then exit 1; fi

URL="https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/CLI%20Base/64"

if [ "$RPIOS_TYPE" = "buster" ]; then
	URL="$URL/Buster/GCC%20$GCCBASE_VERSION/"
elif [ "$RPIOS_TYPE" = "stretch" ]; then
	URL="$URL/Stretch/GCC%20$GCCBASE_VERSION/"
elif [ "$RPIOS_TYPE" = "bullseye" ]; then
	URL="$URL/Bullseye/GCC%20$GCCBASE_VERSION/"
else
	echo "Missing RPIOS_TYPE parameter!"
	exit 1
fi

echo "Downloading and Setting up build directories"
#setup paths
DOWNLOADDIR=$BUILDDIR/build_toolchains
INSTALLDIR=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION
SYSROOTDIR=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/$TARGET/libc

#make dirs
mkdir -p "$DOWNLOADDIR"
mkdir -p "$INSTALLDIR"

cd "$DOWNLOADDIR" || exit

#download binaries if not found
if [ ! -f "cross-gcc-$GCCBASE_VERSION-pi_$FOLDER_VERSION.tar.gz" ]; then
	wget -q --no-check-certificate "${URL}cross-gcc-$GCCBASE_VERSION-pi_$FOLDER_VERSION.tar.gz"
	tar xf cross-gcc-$GCCBASE_VERSION-pi_$FOLDER_VERSION.tar.gz
	mv -v cross-pi-gcc-$GCCBASE_VERSION-$FOLDER_VERSION/* $INSTALLDIR
	rm -rf cross-pi-gcc-$GCCBASE_VERSION-$FOLDER_VERSION
	rm ./*.tar.*
fi
if [ ! -d "gdb-$GDB_VERSION" ]; then
	if [ ! -f "gdb-$GDB_VERSION.tar.xz" ]; then
		wget -q --no-check-certificate https://ftp.gnu.org/gnu/gdb/gdb-$GDB_VERSION.tar.xz
	fi
	tar xf gdb-$GDB_VERSION.tar.xz
	cd gdb-$GDB_VERSION || exit
	mkdir -p build
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.*
fi
if [ ! -d "gcc-$GCC_VERSION" ]; then
	# Download patched GCC 10 series for bullseye
	if [ "$RPIOS_TYPE" = "bullseye" ] && [[ "$GCC_VERSION" =~ ^10.* ]] && [ "$GCC_VERSION" != "10.2.0" ]; then
		echo "Downloading patched GCC-10!"
		git clone https://sourceware.org/git/gcc.git --branch releases/gcc-10
		mv gcc gcc-$GCC_VERSION
	else
		if [ ! -f "gcc-$GCC_VERSION.tar.gz" ]; then wget -q --no-check-certificate https://ftp.gnu.org/gnu/gcc/gcc-"$GCC_VERSION"/gcc-"$GCC_VERSION".tar.gz; fi
		tar xf gcc-"$GCC_VERSION".tar.gz
	fi
	cd gcc-"$GCC_VERSION" || exit
	mkdir -p build
	sed -i contrib/download_prerequisites -e '/base_url=/s/ftp/http/'
	contrib/download_prerequisites
	rm ./*.tar.*
	cd "$DOWNLOADDIR" || exit
	rm ./*.tar.*
fi

echo "Setting up paths..."
PATH=$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin:$PATH
unset LD_LIBRARY_PATH #patch

if [ "$GCC_VERSION" != "$GCCBASE_VERSION" ]; then
	cd "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build || exit
	if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build/*; fi
	../configure --prefix= --target=$TARGET --enable-languages=$LANGUAGES --with-sysroot=/$TARGET/libc --with-build-sysroot="$SYSROOTDIR" --with-arch=$ARCH --disable-multilib
	make -s -j$(nproc)
	make -s install-strip DESTDIR="$INSTALLDIR"
	if [ -n "$(ls -A "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build)" ]; then rm -rf "$DOWNLOADDIR"/gcc-"$GCC_VERSION"/build/*; fi
fi

cd "$DOWNLOADDIR"/gcc-"$GCC_VERSION" || exit
cat gcc/limitx.h gcc/glimits.h gcc/limity.h >$(dirname $($TARGET-gcc -print-libgcc-file-name))/include-fixed/limits.h

echo "Building Cross GDB Binaries..."
cd "$DOWNLOADDIR"/gdb-$GDB_VERSION/build || exit
if [ -n "$(ls -A "$DOWNLOADDIR"/gdb-$GDB_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gdb-$GDB_VERSION/build/*; fi
../configure --prefix= --target=$TARGET --with-arch=$ARCH --with-float=hard -with-sysroot=/$TARGET/libc --with-build-sysroot="$SYSROOTDIR"
make -s -j$(nproc)
make -s install DESTDIR="$INSTALLDIR"
if [ -n "$(ls -A "$DOWNLOADDIR"/gdb-$GDB_VERSION/build)" ]; then rm -rf "$DOWNLOADDIR"/gdb-$GDB_VERSION/build/*; fi
echo "Done Building Cross GDB Binaries..."

mv "$BUILDDIR"/cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION "$HOME"
cd "$HOME" || exit
#compress with maximum possible compression level.
tar cf - cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION | pigz -9 -p 32 >cross-gcc-"$GCC_VERSION"-pi_"$FOLDER_VERSION".tar.gz
echo "Done Building Cross GCC $GCC_VERSION Binaries..."
rm -rf "$HOME"/cross-pi-gcc-"$GCC_VERSION"-$FOLDER_VERSION

#clean path
PATH=$(echo "$PATH" | sed -e 's;:\?$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin;;' -e 's;$BUILDDIR/cross-pi-gcc-$GCC_VERSION-$FOLDER_VERSION/bin:\?;;')
